// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id    String @id @default(auto()) @map("_id") @db.ObjectId
  username  String @unique
  email String? @unique @default("N/A")
  password String
  role Role @default(CUSTOMER)
  creationDate DateTime @default(now())

  // User can own multiple reviews
  reviews Review[]
  bookmarks Bookmark[]

  // 1-1
  settings UserSettings? @relation(fields: [settingsId], references: [id])
  settingsId String? @unique @db.ObjectId
}

model Location {
  id    String @id @default(auto()) @map("_id") @db.ObjectId
  name String
  address String @unique
  phoneNumber String? @default("N/A")
  hasWifi Boolean
  seatingCapacity Int? @default(-1)
  category LocationType
  rating Float @default(0)
  busynessStatus Float @default(0)
  imageWebLink String? @default("N/A")
  locationWebsiteLink String? @default("N/A")
  animalFriendliness Boolean

  // A Location can have many reviews
  reviews Review[]

  // A Location can have many operating hours
  operatingHours OperatingHours[]

  // A Location can have many bookmarks
  bookmarks Bookmark[]
}

model Review {
  id    String @id @default(auto()) @map("_id") @db.ObjectId
  rating Int
  description String

  // Relationships
  location Location @relation(fields: [locationId], references: [id], onDelete: Cascade)
  locationId String @db.ObjectId
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @unique @db.ObjectId
  creationDate DateTime @default(now())
}

model OperatingHours {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  day DayOfWeek
  
  // stored in 00:00 - 23:59 format
  // frontend will need to convert to 12 hour format
  openTime String
  closeTime String

  // Relationship
  location Location @relation(fields: [locationId], references: [id], onDelete: Cascade)
  locationId String @db.ObjectId
}

model Bookmark {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @db.ObjectId
  locationId String @db.ObjectId
  creationDate DateTime @default(now())

  // Relationships
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  location Location @relation(fields: [locationId], references: [id], onDelete: Cascade)
}

model UserSettings {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  
  darkMode Boolean @default(false)
  notifications Boolean @default(false)
 
  user User? @relation
}

// Enums
enum DayOfWeek {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
}

enum Role {
  ADMIN
  MODERATOR
  BUSINESS_OWNER
  CUSTOMER
}

// Can add more location types
enum LocationType {
  LIBRARY
  CAFE
}